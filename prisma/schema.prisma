generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String
  slug       String      @unique
  parent     Category?   @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId   Int?
  children   Category[]  @relation("CategoryToCategory")
  products   Product[]
  attributes Attribute[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([parentId])
}

model Attribute {
  id               Int                @id @default(autoincrement())
  name             String
  category         Category           @relation(fields: [categoryId], references: [id])
  categoryId       Int
  options          AttributeOption[]
  isFilterable     Boolean            @default(true)
  displayOrder     Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  VariantAttribute VariantAttribute[]

  @@index([categoryId])
}

model AttributeOption {
  id               Int                @id @default(autoincrement())
  value            String
  attribute        Attribute          @relation(fields: [attributeId], references: [id])
  attributeId      Int
  createdAt        DateTime           @default(now())
  VariantAttribute VariantAttribute[]

  @@index([attributeId])
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  slug        String?        @unique
  description String?
  brand       String
  basePrice   Float
  status      ProductStatus  @default(DRAFT)
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  Int
  images      ProductImage[]
  variants    Variant[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([categoryId])
  @@index([status])
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  url         String
  altText     String?
  isThumbnail Boolean  @default(false)
  order       Int      @default(0)
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  createdAt   DateTime @default(now())

  @@index([productId])
}

model Variant {
  id         Int                @id @default(autoincrement())
  sku        String             @unique
  price      Float
  stock      Int                @default(0)
  status     VariantStatus      @default(ACTIVE)
  product    Product            @relation(fields: [productId], references: [id])
  productId  Int
  attributes VariantAttribute[]
  images     VariantImage[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([productId])
  @@index([sku])
}

enum VariantStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

model VariantAttribute {
  variant     Variant         @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId   Int
  attribute   Attribute       @relation(fields: [attributeId], references: [id])
  attributeId Int
  option      AttributeOption @relation(fields: [optionId], references: [id])
  optionId    Int
  createdAt   DateTime        @default(now())

  @@id([variantId, attributeId])
  @@index([variantId])
  @@index([attributeId, optionId])
}

model VariantImage {
  id        Int      @id @default(autoincrement())
  url       String
  order     Int      @default(0)
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId Int
  createdAt DateTime @default(now())

  @@index([variantId])
}
